This is a very basic how-to guide for compiling and running the prototype version of MUTGOS.  It is not designed for the beginning developer or those new to Linux, yet, but as development progresses it should get easier to compile and run.

As we progress out of being a prototype, this file will eventually disappear and be replaced by something better written, more comprehensive, and hopefully with less manual steps.


Dependencies
------------
Newer versions may work, but have not yet been tested.

  * Boost 1.67 (https://www.boost.org/doc/libs/1_67_0/more/getting_started/unix-variants.html)
  * OpenSSL (tested with 1.1.0g)
  * rapidjson 1.1.0 (https://github.com/Tencent/rapidjson/tree/v1.1.0)
  * sqlite3 (tested with 3.15.2) - may be called sqlite3-dev on your package manager
    * A slightly older or newer version should be fine.
    * You should have shared libraries and header files once built or installed.
  * angelscript 2.33 (https://www.angelcode.com/angelscript/downloads.html)


Build each dependency according to their instructions.  To avoid messing up your system files, it is highly suggested you create a separate directory for MUTGOS dependencies, and have MUTGOS link to that directory instead.  You may need to create subdirectories in there such as ./lib, ./include, ./bin, etc.  

Sample build commands that place dependencies in a non-system directory (/path/to/mutgos/depends) are as follows:


BOOST:
sudo apt-get install libbz2-dev
./bootstrap.sh --prefix=/path/to/mutgos/depends --libdir=/path/to/mutgos/depends/lib --includedir=/path/to/mutgos/depends/include
./b2 --prefix=/path/to/mutgos/depends --libdir=/path/to/mutgos/depends/lib --includedir=/path/to/mutgos/depends/include --without-python install


RAPIDJSON:
RapidJSON is a header-only C++ library. Just copy the 'include/rapidjson' folder to /path/to/mutgos/depends/include


SQLITE3:
./configure --prefix=/path/to/mutgos/depends --libdir=/path/to/mutgos/depends/lib --includedir=/path/to/mutgos/depends/include --bindir=/path/to/mutgos/depends/bin
make clean
make install


ANGELSCRIPT:
cd angel/sdk/angelscript/projects/gnuc
(Modify Makefile at line 87 to include -g for debugging AngelScript, if desired)
make PREFIX=/path/to/mutgos/depends clean
make PREFIX=/path/to/mutgos/depends
make PREFIX=/path/to/mutgos/depends install



Compiling MUTGOS
----------------
Now that all dependencies have been installed, modify the root CMakeLists.txt file (just above src directory) to point to your dependencies.  Change the lines reading "include_directories(BEFORE SYSTEM" and "link_directories" to point to your new include and lib directories, respectively.  Obviously, you do not want to commit this to the repo; this will hopefully be fixed soon to use relative paths or similar.

Now, you can actually compile MUTGOS.  In the same directory as the CMakeLists.txt file was modified, you can use CMake to build it as usual.  Some IDEs will also build it via their UIs.
  
  $ cmake .
  $ make
  
Once it completes, you're ready to import the database.


Before Running Any Executables
------------------------------
You will have to manually tell Linux where your dependency directory (LD_LIBRARY_PATH) is.  One way you can do this is by typing a command similar to the following in the terminal window you'll be running MUTGOS programs (make it into a short script as needed):

    export LD_LIBRARY_PATH=.:/path/to/mutgos/depends/lib


Next, you need to set up a data directory.  Outside of the source tree, make a directory (say, 'data').  Copy mutgos_server/data/mutgos.conf.sample into it as `mutgos.conf`, and update the data_dir_path in the copied mutgos.conf to point to the newly created data directory.  Modify options to suit (such as adjusting ports, SSL, etc).  You may wish to copy the certificate files (later section) into this directory, however the options allow for absolute paths as needed.
[TODO(hyena): I think this ordering of instructions and the 'data' directory in general may be confusing. Restructure this document.]

Importing a Database
--------------------
Before you can run the server, you need to import a database.  This can be done as follows:

  * Find the readdump executable.  Depending on if you had an IDE build it or not, it may be alongside the source code at src/exe/read_dump, or in a parallel directory such as cmake-build-debug/src/exe/read_dump.
  * cd to where the readdump executable is.
  * Run a command like:  ./readdump --configfile /path/to/mutgos/data/mutgos.conf --dumpfile /path/to/mutgos/data/prototype_db.dump
  * This will import the given dump file.
  * A bunch of text will scroll by, and you should catch something about "Parsing completed successfully.".
  * The database file will now exist wherever the MUTGOS config file specified.


Generating a SSL Certificate
----------------------------
If you want to run the server with ssl, you'll need an ssl certificate.  For testing purposes you can generate a self-signed key and certificate with openssl as follows:

  * Navigate to the data directory you created earlier (see Before Running Any Executables above)
  * Run the following command:
    openssl req -x509 -subj '/CN=localhost' -newkey rsa:4096 -nodes -keyout key.pem -out cert.pem

In production, you'll want to use a real certificate and key. If you own your domain, we recommend using certbot to generate a Let's Encrypt certificate for this. See https://certbot.eff.org/ for instructions. You'll probably want to select 'Other' for your software and obtain your certificate using `sudo certbot certonly`.

Once you successfully generate the certificate and key copy them over to your data directory. e.g.:
  cp /etc/letsencrypt/live/www.example.org/fullchain.pem mutgos_server/data/cert.pem
  cp /etc/letsencrypt/live/www.example.org/privkey.pem mutgos_server/data/key.pem
Be sure to protect these files! It may be necessary in production to run mutgos_server as its own user with privileged read access to them.


Running the server
------------------
After importing the database, above, you can run the server.

  * Find the mutgos_server executable (should be an adjacent directory from readdump).
  * cd to the found executable.
  * Run the executable, pointing it to the config file.  As an example:
  *    ./mutgos_server --configfile ../../../data/mutgos.conf
  * If no arguments are given, it will try and load the configfile from the current directory.  --help gives all options.
  * After a second or two, it should print out a few lines and then sit there.  MUTGOS is now running.
  * ctrl-c should let it shutdown gracefully, or if not send it a SIGQUIT.
  * If your IDE catches signals, you can add an empty mutgos_shutdown file (using touch, etc) in the executable directory and it will also shutdown gracefully in a few seconds.

  
Connecting to the server
------------------------
  * Connect to 127.0.0.1, port 7072 (no SSL) or port 7073 (SSL) using telnet or a MUD client.
  * Look at the dump file to find usernames and passwords.  Either way, you want to login to site #2.
  * Try out some of the commands!  The dump file will hint at what's available.  The commands closely mirror the average text game (familiarity with one is highly suggested), and partial matches for Entity names along with the usual 'me', 'here', and #1234 (for Entity DB ID) should work:
    * @ps  - shows running processes
    * who  - shows who is online
    * examine  <entity>  -  Shows detailed information about an Entity, if you have permission.  Example: 'examine me'
    * say <text>  - Says something to the room.  Example: 'say Hello!'
    * pose, :  - Poses an action to the room.  Example: ':moves around.'
    * look [Entity]  - Looks at the room, or at an entity.  Examples: 'look', 'look me'
    * @description <Entity>=<text>  - Sets the Entity's description to what's provided, if you have permission.  Example: '@desc me=You see a player.'
    * inventory  -  Shows what you are carrying
    * @create <name>  - Creates a Thing named <name> in your inventory, if you are a builder.  Example: '@create Teapot'
    * @delete <name>  -  Deletes the named Entity, if you have permission and are a builder.  Example: '@delete Teapot'
    * drop <name>  -  Drops the named item from your inventory.  Example: 'drop teapot'
    * get <name>  - Picks something up from the room and puts it in your inventory.  Example: 'get teapot'
    * page <player>=<Message>  - Sends a private message to the named player.  Example: 'page root=You are the admin?'
    * @security  -  A temporary command that sets the read and write permissions on the 'other' security for an Entity, and can also add or remove admins from the Entity's admin list.  Mostly a demo artifact to show how security works.  Type '@security' for help.
    * @looksecurity  -  A temporary command that adjusts the write permission and admins on the 'other' security for the 'look' properties.  Mostly a demo artifact to show how security works.  This would allow other people to adjust your (or one of your Entity's) description.  Type '@looksecurity' for help.
    * QUIT - Closes your connection nicely and logs you out.
    * @listprog <#dbid>  - A temporary C++ command that lets you view a program's source code, if you have permission.  Example: '@listprog #12'
    * @editprog <#dbid>  - A temporary C++ command that lets you replace a program's source code with new code, if you have permission.  Example: '@editprog #12'
    * >>  - Redirection modifier.  Allows you to send the output of a program to a Document property on an Entity.  Example: 'look >> me=/look/lookoutput'
    * Exits listed in the room will take you to other rooms.
    * !help  -  Accesses help screen when connecting via a socket.  This provides socket-specific commands.
    * If you close your connection without typing 'QUIT', you can log back in and resume where you left off, and see what you missed.
    * Some commands accept color in the format (simplified for this document) of ~`colorname`, and ~`` to reset the color to default.  For instance:   say Hello ~`blue`blue text~``!

    
Using the Prototype Web Client
------------------------------
  * By default, in the config file, the websocket server is active and listening on port 7000
  * MUTGOS itself is NOT a webserver by design.  You have to run a separate server to bring the pages up.  If you have Python installed, this is easy:
	* Open a console and change to the 'web' directory inside the MUTGOS source tree.
    * Run the Python built-in webserver from that directory like this:  python -m SimpleHTTPServer
    * As an alternative approach, some IDEs can also serve up pages.
  * Once the webserver is running, start up MUTGOS as usual.
  * Point your browser to http://127.0.0.1:8000/ui/index.html   (if running locally with Python)
  * Some features of note:
    * The login dialog is not screen scraping; it uses JSON to get a list of sites, authenticate, etc.
    * If you login on a separate computer, you can pull the network cable out, then plug it back in, and it will continue right where it left off with no loss of data.
    * Anything in yellow can be clicked.
      * If you click on an exit, it will take you through the exit (or run the program).
      * Clicking on anything else (players, things, etc) will cause a popup to appear with the description.
